#!/usr/bin/env bash
set -euo pipefail

# Gather KiCad projects from Github using their search API and the command-line JSON processor.
# Supporting documentation:
#   Github search API: https://docs.github.com/en/rest/search/search?apiVersion=2022-11-28#search-repositories
#   Github search examples: https://gist.github.com/jasonrudolph/6065289
#   jq JSON processor: https://manpages.ubuntu.com/manpages/xenial/man1/jq.1.html

# Search term for KiCad projects.
search_term="kicad"

# File for storing KiCad Github repositories.
kicad_repos="kicad_repos.json"

# If file doesn't exist or is empty, then make a file with an empty array of repository data.
if [ ! -e $kicad_repos ] || [ ! -s $kicad_repos ]; then
    echo '[]' > $kicad_repos
fi

# Temporary files for search results.
page_repos=$(mktemp)
tmpfile=$(mktemp)

# Number of results per page returned by Github search API.
page_size=100

# Search for repos year-by-year.
for y in {2008..2023}
do

    # Search for repos in each month of the year. This keeps #repos < 1000 (Github search API limit). 
    for m in {01..12}
    do

        # Clear the screen and report progress.
        echo "Gathering KiCad projects for $y/$m ..."

        # Search for repos created in this month-year.
        created_on="${y}-${m}"

        # Scan through each page of search results until a non-full page appears.
        num_projs_on_page=$page_size
        for (( pg=1; num_projs_on_page==page_size; pg+=1 ))
        do

            # Search Github for the year-month and process the page of results.
            curl -G https://api.github.com/search/repositories \
                --data-urlencode "q=$search_term in:readme created:$created_on" \
                --data-urlencode "per_page=$page_size" \
                --data-urlencode "page=$pg" \
                --data-urlencode "sort=updated" \
                -H "Accept: application/vnd.github+json" \
                2>/dev/null \
                | jq "
                    [ \
                        .items[] | \
                        { \
                            project:.name, \
                            description, \
                            owner:.owner.login, \
                            stars:.stargazers_count, \
                            forks:.forks_count, \
                            size, \
                            created:.created_at, \
                            url:.html_url, \
                            id \
                        } \
                    ]" > $page_repos

            # Observe rate-limit of Github search (10 searches / minute)
            sleep 6s

            # Get the number of projects on the current page of results.
            num_projs_on_page=`cat $page_repos | jq ".|length"`

            if (( $num_projs_on_page != 0 )); then
                # Append page results to the end of the KiCad repos JSON file.
                # Create an array containing two subarrays: [ [KiCad repos], [page repos] ]
                (echo '['; cat $kicad_repos; echo ','; cat $page_repos; echo ']') > $tmpfile
                # Now merge the two subarrays into a single array.
                cat $tmpfile | jq ".[0]+.[1]" > $kicad_repos
            fi

        done  # Page done.
    done  # Month done.
done  # Year done.

# Remove duplicate projects. (Dups could be caused by rerunning this script with overlapping search dates.)
cp $kicad_repos $tmpfile
cat $tmpfile | jq 'unique' > $kicad_repos
